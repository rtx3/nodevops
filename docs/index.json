[{"categories":["教程"],"contents":"统一登录开源服务Casdoor部署 统一登录是自动运维的基础以及基石，它可以极大的减少用户的管理成本。\n常用的统一登录方式有\nAD LDAP CAS OAUTH 开源服务提供了大部分的接入方式，并且依赖简单，值得使用。\n当使用在生产环境时，需使用K8S等方式实现高可用。\n！当使用在生产环境时，将管理人员使用的登录服务与普通用户使用的登录服务隔离。\nCasdoor features Casdoor follows a front-end and back-end separate architecture, developed by Golang. It supports high concurrency, provides a web-based UI for management, and supports localization in 10+ languages. Casdoor supports third-party application login, such as GitHub, Google, QQ, and WeChat, and it supports extending third-party login with plugins. Casdoor supports authorization management based on Casbin. It supports ACL, RBAC, ABAC, and RESTful access control models. Casdoor provides phone verification code, email verification code, and password retrieval functions. Casdoor supports auditing and recording of accessing logs. Casdoor integrates with Alibaba Cloud, Tencent Cloud, and Qiniu Cloud image CDN cloud storage. Casdoor allows customization of registration, login, and password retrieval pages. Casdoor supports integration with existing systems by database synchronization, enabling smooth transition to Casdoor. Casdoor supports mainstream databases such as MySQL, PostgreSQL, and SQL Server, and it supports the extension of new databases with plugins. How Casdoor Works Casdoor follows the authorization process built upon the OAuth 2.0 protocol. It is highly recommended to have a brief understanding of how OAuth 2.0 works. You can refer to this introduction to OAuth 2.0.\n![镜像](https://casdoor.org/zh/assets/images/oauth-2913ec44d8cf5851fd9dd7c359ed4e21.pn\nInstallation 注意事项\n如使用容器数据库，则去掉注释\nversion: \u0026#39;3.1\u0026#39; services: casdoor: restart: always image: casbin/casdoor:v1.428.0 entrypoint: /bin/sh -c \u0026#39;./server --createDatabase=true\u0026#39; ports: - \u0026#34;8000:8000\u0026#34; # depends_on: # - postgres environment: RUNNING_IN_DOCKER: \u0026#34;true\u0026#34; volumes: - ./conf:/conf/ #use local postgresql db #postgres: # image: postgres:12-alpine # user: postgres # environment: # POSTGRES_USER: postgres # POSTGRES_PASSWORD: p0stgr3s # PGDATA: /var/lib/postgresql/data/pgdata # healthcheck: # test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;pg_isready\u0026#34;] # interval: 10s # timeout: 5s # retries: 5 # volumes: # - /srv/postgresql/data:/var/lib/postgresql/data 配置文件：\nappname = casdoor httpport = 9000 runmode = dev SessionOn = true copyrequestbody = true driverName = postgres dataSourceName = \u0026#34;user=postgres password=p0stgr3s host=localhost port=5432 sslmode=disable dbname=casdoor\u0026#34; dbName = casdoor tableNamePrefix = showSql = false redisEndpoint = defaultStorageProvider = isCloudIntranet = false authState = \u0026#34;casdoor\u0026#34; socks5Proxy = verificationCodeTimeout = 10 initScore = 2000 logPostOnly = true origin = #!! staticBaseUrl = \u0026#34;https://cdn.casbin.org\u0026#34; isDemoMode = false batchSize = 100 ldapServerPort = 389 languages = en,zh,es,fr,de,ja,ko,ru,vi quota = {\u0026#34;organization\u0026#34;: -1, \u0026#34;user\u0026#34;: -1, \u0026#34;application\u0026#34;: -1, \u0026#34;provider\u0026#34;: -1} 置于conf目录下后启动：\ndocker-compose up 服务启动有坑的地方 origin = #!! 如果这里不置空则会强制校验域名，当部署在nginx时后会出现403.\n","permalink":"https://rtx3.com/post/casdoor-installation-run/","tags":["安装","开源服务"],"title":"统一登录开源服务安装"},{"categories":["教程"],"contents":"说明书文档格式写好了，只需要按照框架填充内容。\n第一页「封面」需要修改软件名称和版本号，以V1.0申请；修改作者、负责人以及创建日期和更新日期 第二页「修订历史」根据自己实际情况修改日期和修改者，注意需要和封面日期对应起来，描述改不改无所谓 第三页 「一、简介」第一段根据软件自己修改，1.1 和 1.2 可以不改 「二、用途」2.1 需要根据自己软件修改，2.2 和 2.3 可以不改 「三、运行环境」根据自己软件修改 「四、使用说明」名称改一下就行 从 4.1 一直到 4.xx 就根据自己软件提供截图，描述截图的功能就行，写满 30 页。不够的就把软件功能全部截图描述完就行。 模版链接: https://www.aliyundrive.com/s/pgDX9SAd2GE\n","permalink":"https://rtx3.com/post/china-code-register-2/","tags":["软著","china"],"title":"APP审核说明书文档"},{"categories":["教程"],"contents":"代码文档注意事项：\n不要有空白行 不要有注释行和注释块，代码结尾处不影响，但是最好也删掉（主要是注释和空白行不能算源代码行数） 建议粘帖后手动整理一下 建议写满 60 页（前 30 页，后 30 页），理论上代码量不足 60 页，全部提交也没问题 字体使用宋体、字号 10、行距 1 模版链接: https://www.aliyundrive.com/s/pgDX9SAd2GE\n","permalink":"https://rtx3.com/post/china-code-register-3/","tags":["软著","china"],"title":"软著审核代码文档"},{"categories":["教程"],"contents":"一、前期需要准备的： 1、程序源代码（最好60页的源代码文档，pdf 格式） 2、程序运行的截图（用来编写使用说明书）\n二、申请软著 1、打开中国版权保护中心网站：https://www.ccopyright.com.cn/ 2、点击「我要登记」图标 3、点击「立即登记」 4、没有登录的登录或者一下，注意这里有「个人用户」和「机构」。个人就是个人申请，机构一般是公司申请。 5、选择：我是申请人 6、依据自己情况填写软件申请信息 7、依据自己情况填写软件开发信息 8、填写软件功能与特点（注意：有两份文件要上传，1 程序鉴别材料，俗称源代码，2 文档鉴别材料，俗称使用说明书，这两份文档在 repo 中单独给出，并且有很多限制条件，具体看模版） 9、确认信息\n10、填报完成，这里什么都不用点击 11、直接点击右上角「用户中心」继续操作，会看到状态为「待提交材料」的登记记录。 12、点击「打印签章页」，打印出来签字或盖章。再点击「上传签章页」进行上传提交。注意：请勿擅自更改申请确认签章页的内容、格式和打印比例，否则可能会被驳回。 13、点击「查看详情」 14、拉到最下面，点击「查看申请表」，查看需要准备的申请表，当前下载功能正在升级，待升级好了可以点击下载。下载好了签字或盖章。 ","permalink":"https://rtx3.com/post/china-code-register-1/","tags":["软著","china"],"title":"软著审核准备"},{"categories":null,"contents":"","permalink":"https://rtx3.com/archives/","tags":null,"title":""},{"categories":null,"contents":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","permalink":"https://rtx3.com/about/","tags":null,"title":"About"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","permalink":"https://rtx3.com/search/","tags":null,"title":"Search Results"}]